---
- name: Ensure Docker is running on all nodes
  hosts: all
  become: yes
  tasks:
    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

- name: Stop Healthify Stack and Remove Images
  hosts: manager
  become: yes
  tasks:
    - name: Remove existing Healthify stack (if any)
      shell: docker stack rm healthify
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Wait for Healthify stack removal to complete
      shell: |
        while docker stack services healthify 2>/dev/null | grep -q .; do
          echo "Waiting for Healthify stack to be removed..."
          sleep 10
        done
      args:
        executable: /bin/bash

    - name: Get image IDs for healthify-frontend
      shell: |
        {% raw %}
        docker images --format '{{.Repository}} {{.ID}}' | \
        grep '192.168.50.4:5000/healthify-frontend' | \
        awk '{print $2}'
        {% endraw %}
      register: frontend_images
      changed_when: false

    - name: Get image IDs for healthify-backend
      shell: |
        {% raw %}
        docker images --format '{{.Repository}} {{.ID}}' | \
        grep '192.168.50.4:5000/healthify-backend' | \
        awk '{print $2}'
        {% endraw %}
      register: backend_images
      changed_when: false

    - name: Combine image IDs
      set_fact:
        all_images: "{{ frontend_images.stdout_lines + backend_images.stdout_lines }}"

    - name: Remove Healthify images
      shell: docker rmi -f {{ item }}
      loop: "{{ all_images }}"
      when: all_images | length > 0
      ignore_errors: yes

- name: Deploy Healthify Stack from Manager
  hosts: manager
  become: yes
  tasks:
    - name: Remove existing Healthify stack (if any)
      shell: docker stack rm healthify || true
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Wait for Healthify stack removal to complete
      shell: |
        while docker stack services healthify 2>/dev/null | grep -q .; do
          echo "Waiting for Healthify stack to be removed..."
          sleep 2
        done
      args:
        executable: /bin/bash

    - name: Create Healthify deployment directory
      file:
        path: /home/jenkins/healthify-stack
        state: directory
        owner: jenkins
        group: jenkins
        mode: '0755'

    - name: Copy Healthify stack file to manager
      copy:
        src: ./stack/docker-stack.yml
        dest: /home/jenkins/healthify-stack/docker-stack.yml
        owner: jenkins
        group: jenkins
        mode: '0644'
        force: yes

    - name: Create external network healthify_net if not exists
      shell: docker network create --driver overlay healthify_net || true
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Ensure external volume pgdata exists
      shell: docker volume create pgdata || true
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Deploy Healthify stack
      shell: docker stack deploy -c /home/jenkins/healthify-stack/docker-stack.yml healthify
      args:
        warn: false
      register: deploy_result
      changed_when: "'Updating' in deploy_result.stdout or 'Creating' in deploy_result.stdout"

    - name: Display Healthify deployment output
      debug:
        var: deploy_result.stdout_lines

    - name: Check Healthify service status
      shell: docker stack services healthify
      register: service_status
      changed_when: false

    - name: Display service status
      debug:
        var: service_status.stdout_lines

    - name: Get failed tasks for Healthify services
      shell: |
        {% raw %}
        docker service ls --format '{{.Name}}' | grep healthify | while read svc; do
          echo "Service: $svc"
          docker service ps $svc --no-trunc | grep -E 'Failed|Rejected|Shutdown' || true
        done
        {% endraw %}
      register: failed_tasks
      changed_when: false
      ignore_errors: true

    - name: Show failed task details
      debug:
        var: failed_tasks.stdout_lines

    - name: Wait for frontend to respond
      uri:
        url: http://192.168.50.4:5173
        status_code: 200
        timeout: 10
      register: frontend_check
      retries: 5
      delay: 5
      until: frontend_check.status == 200
